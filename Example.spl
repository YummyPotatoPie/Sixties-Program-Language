#Демонстрация Тьюринг-полноты SPL
#Критерии Тьюринг-полноты:
#   1.Конечность
#   2.Фиксированное описание (формальность)
#   3.Всегда достаточный объем памяти
#   4.Неограниченность времени выполнения
#   5.Возможность функциональной композиции
#   6.Наличие циклов while c прерыванием или эквивалентных им конструкций
#   7.Возможность остановки выполнения 
#   8.Представление множества натуральных чисел
#   9.Поддержка неограниченного ввода-вывода
#Большинство ЯП Тьюринг-полны

#   1.Конечность SPL очевидна
#   2.Формальность SPL очевидна
#   3.Очевидность следует из архитектуры интерпретатора
#   4.Неограниченность времени выполнения очевидна
#   8.Представление натуральных чисел следует из архитектуры памяти интерпретатора
#   5.Продемонстрируем возможность функциональной композиции вычислив
#       сложную функцию G o F : F(n) = 2^(n!), G(n) = 2.71 * n
#       G o F при n = 3 равно 173.44

VAR N = 3
VAR FACTORIAL = 1
VAR TWO_POWER = 1
VAR G_RESULT = 1

#   6.Наличие циклов while с прерыванием
WHILE N
    FACTORIAL *= N
    N -= 1
ENDWHILE

WHILE FACTORIAL
    TWO_POWER *= 2
    FACTORIAL -= 1
ENDWHILE

G_RESULT *= 2.71
G_RESULT *= TWO_POWER

#   9.Демонстрация вывода
OUTPUT G_RESULT

#   9.Демонстрация ввода 
#   7.И остановки в зависимости от ввода
VAR EXIT = 0
INPUT EXIT

IF EXIT THEN BREAK

#Данная строчка выведится если условие будет ложным и программа не прервется
VAR S = 90001995
OUTPUT S

#Таким образом SPL Тьюринг-полный язык, но при этом находящийся 
#в Тьюринговой трясине (то есть довольно примитивный и/или низкоуровневый)